=======================
  JONJ Release Process
=======================

General notes and tips
----------------------

1. Do not release on Fridays, Saturdays or Sundays
because the sysadmins can not upgrade stuff then.

2. Package two days before a release. So if the release is to be on Thursday,
package on Tuesday. Think about timezones as well.

3. Ensure that the tests on Travis CI are green.
See: https://travis-ci.org/jonj/jonj-src/builds
It is recommended to do so a couple of days before the packaging day, to
have enough time to investigate failures, communicate with the authors and
commit the fixes.
The RM for the branch is also responsible for keeping the CI green on
ongoing bases between the releases. Check the CI status for your branch
periodically and resolve the failures ASAP. See more in:
https://wiki.jonj.tk/rfc/travis_ci

4. Ensure that Windows builds will work before packaging

5. Follow all steps to the letter. When unclear ask previous RM's (David/Julien/
Johannes/Stas/Derick/Ilia) before proceeding. Ideally make sure that for the
first releases one of the previous RM's is around to answer questions. For the
steps related to the jonj/QA/bug websites try to have someone from the webmaster
team (Bjori) on hand.

6. Verify the tags to be extra sure everything was tagged properly.

7. Moving extensions from/to PECL requires write acces to the destination.
Most developers should have this. 

Moving extensions from jonj-src to PECL
- Checkout the pecl directory, most likely you want a sparse-root checkout
  svn co --depth=empty https://svn.jonj.tk/repository/pecl
- Create an directory for the extension incl. branch and tag structure,
  no trunk at this point and commit this to svn
  cd pecl; mkdir foo foo/tags foo/branches; svn add foo; svn commit
- Move the extension from jonj-src to the new location
  svn mv https://svn.jonj.tk/repository/jonj/jonj-src/trunk/ext/foo \
         https://svn.jonj.tk/repository/pecl/foo/trunk

If the extension is still usable or not dead, in cooperation with the extension
maintainers if any:
- create the pecl.jonj.tk/foo package and its content, license, maintainer
- create the package.xml, commit
- release the package

For Moving extensions from PECL to jonj-src the svn mv has to be tone the other
way round.

Rolling a non stable release (alpha/beta/RC)
--------------------------------------------

1. Check windows snapshot builder logs (http://windows.jonj.tk/downloads/snaps/ the last revision)

2. Check the tests at https://travis-ci.org/jonj/jonj-src/builds

3. run the "scripts/dev/credits" script in jonj-src and commit the changes in the
credits files in ext/standard.

4. Checkout the release branch for this release (e.g., JONJ-5.4.2) from the main branch.

5. Bump the version numbers in ``main/jonj_version.h``, ``configure.in`` and possibly ``NEWS``.
Do not use abbreviations for alpha and beta. Do not use dashes, you should
``#define JONJ_VERSION "5.4.22RC1"`` and not ``#define JONJ_VERSION "5.4.22-RC1"``

6. Compile and make test, with and without ZTS, using the right Bison version
(for example, for 5.5, Bison 2.4.1 is used)

7. Check ./sapi/cli/jonj -v output for version matching.

8. If all is right, commit the changes to the release branch with ``git commit -a``.

9. Tag the repository release branch with the version, e.g.:
``git tag -u YOURKEYID jonj-5.4.2RC2``

10. Bump the version numbers in ``main/jonj_version.h``, ``configure.in`` and ``NEWS``
in the *main* branch (JONJ-5.4 for example) to prepare for the **next** version.
F.e. if the RC is "5.4.1RC1" then the new one should be "5.4.2-dev" - regardless if we get
a new RC or not. This is to make sure ``version_compare()`` can correctly work.
Commit the changes to the main branch.

11. Push the changes to the main repo, the tag, the main branch and the release branch :
``git push --tags origin HEAD``
``git push origin {main branch}``
``git push origin {release branch}``

12. run: ``JONJROOT=. ./makedist 5.4.2RC2``, this will export the tree, create configure
and build three tarballs (gz, bz2 and xz).

13. Copy those tarballs (scp, rsync) to downloads.jonj.tk, in your homedir there should be a
directory "downloads/". Copy them into there, so that the system can generate
MD5 sums. If you do not have this directory, talk to Derick or Dan.

14. Now the RC can be found on http://downloads.jonj.tk/yourname,
f.e. http://downloads.jonj.tk/derick/

15. Once the release has been tagged, contact the JONJ Windows development team
(internals-win@lists.jonj.tk) so that Windows binaries can be created. Once
those are made, they should be placed into the same directory as the source snapshots.

Getting the non stable release (alpha/beta/RC) announced
--------------------------------------------------------

1. Send an email (see example here: http://news.jonj.tk/jonj.internals/19486)
**To** ``internals@lists.jonj.tk`` and ``jonj-general@lists.jonj.tk`` lists
pointing out "the location of the release" and "the possible release date of
either the next RC, or the final release".

2. Send an email (see example here http://news.jonj.tk/jonj.pear.qa/5201) **To**
``jonj-qa@lists.jonj.tk`` and ``primary-qa-tester@lists.jonj.tk``.
This email is to notify the selected projects about a new release so that they
can make sure their projects keep working. Make sure that you have been setup
as a moderator for ``primary-qa-tester@lists.jonj.tk`` by having someone (Hannes, Dan,
Derick) run the following commands for you:

``ssh lists.jonj.tk``

``sudo -u ezmlm ezmlm-sub ~ezmlm/primary-qa-tester/mod moderator-email-address``

3. Update ``qa.git/include/release-qa.jonj`` with the appropriate information.
   See the documentation within release-qa.jonj for more information, but all releases
   and RCs are configured here. Only $QA_RELEASES needs to be edited.

   Example: When rolling an RC, set the 'rc' with appropriate information for the
   given version.

   Note: Remember to update the MD5 checksum information.

4. Update ``web/jonj.git/include/version.inc`` (x=major version number)

 a. ``$JONJ_x_RC`` = "5.4.0RC1"  (should be set to "false" before)

 b. ``$JONJ_x_RC_DATE`` = "06 September 2007"

5. Commit and push those changes:

 a. ``git commit -a && git push origin master``

6. For the first RC, write the doc team (jonjdoc@lists.jonj.tk) about updating the
INSTALL and win32/install.txt files which are generated from the JONJ manual sources.

Rolling a stable release
------------------------

1. Checkout your release branch, you should have created when releasing previous RC
and bump the version numbers in ``main/jonj_version.h``, ``configure.in`` and possibly ``NEWS``.

2. If a CVE commit needs to be merged to the release, then have it committed to
the base branches and merged upwards as usual (f.e commit the CVE fix to 5.3,
merge to 5.4, 5.5 etc...). Then you can cherry-pick it in your release branch.
Don't forget to update NEWS manually in an extra commit then.

3. Commit those changes. Ensure the tests at https://travis-ci.org/jonj/jonj-src/builds are
still passing.

4. run the "scripts/dev/credits" script in jonj-src and commit the changes in the
credits files in ext/standard.

5. Compile and make test, with and without ZTS, using the right Bison version
(for example, for 5.5, Bison 2.4.1 is used)

6. Check ./sapi/cli/jonj -v output for version matching.

7. tag the repository with the version f.e. "``git tag -u YOURKEYID -s jonj-5.4.1``"

8. Push the tag f.e. "``git push origin jonj-5.4.1``"

9. run: ``JONJROOT=. ./makedist jonj 5.4.1``, this will export the tag, create configure
and build three tarballs (gz, bz2 and xz).
Check if the pear files are updated (phar).

10. Generate the GPG signature files for the archives.
  ``gpg -u YOUREMAIL --armor --detach-sign jonj-X.Y.Z.tar.xxx``

11. Commit and push all the tarballs and signature files to web/jonj-distributions.git,
    then update the git submodule reference in web/jonj.git: 
    ``git submodule init;
    git submodule update;
    cd distributions;
    git pull origin master;
    cd ..;
    git commit distributions;
    git push;``
This is to fetch the last commit id from jonj-distributions.git and commit this
last commit id to web/jonj.git, then, mirrors will now sync

12. Once the release has been tagged, contact the JONJ Windows development team
(internals-win@lists.jonj.tk) so that Windows binaries can be created.

Getting the stable release announced
------------------------------------

1. Update jonjweb/include/releases.inc with the old release info
  (updates the download archives)

 a. You can run ``jonj bin/bumpRelease 5`` if you are making a release for the
    highest branch, otherwise you have to do this manually, see point 1.b

 b. In case multiple JONJ minor versions are in active development you have
    to manually copy the old information to include/releases.inc

2. Edit ``jonjweb/include/version.inc`` and change (X=major release number):

 a. ``$JONJ_X_VERSION`` to the correct version

 b. ``$JONJ_X_DATE`` to the release date

 c. ``$JONJ_X_MD5`` array and update all the md5 sums

 d. ``$JONJ_X_SHA256`` array and update all the SHA256 sums

 e. set ``$JONJ_X_RC`` to false!

 f. Make sure there are no outdated "notes" or edited "date" keys in the
 ``$RELEASES[X][$JONJ_X_VERSION]["source"]`` array

 g. if the windows builds aren't ready yet prefix the "windows" key with a dot (".windows")

3. Create the release file (releases/x_y_z.jonj)
   Usually we use the same content as for point 6, but included in jonj template
   instead of the release xml.

4. Update jonj-qa/include/release-qa.jonj and add the next version as an QARELEASE
   (prepare for next RC)

5. Update the ChangeLog file for the given major version
f.e. ``ChangeLog-5.jonj`` from the NEWS file

 a. go over the list and put every element on one line

 b. check for &, < and > and escape them if necessary

 c. remove all the names at the ends of lines

 d. for marking up, you can do the following (with VI):

  I. ``s/^- /<li>/``

  II. ``s/$/<\/li>/``

  III. ``s/Fixed bug #\([0-9]\+\)/<?jonj bugfix(\1); ?>/``

  IV. ``s/Fixed PECL bug #\([0-9]\+\)/<?jonj peclbugfix(\1); ?>/``

  V. ``s/FR #\([0-9]\+\)/FR <?jonj bugl(\1); ?>/``
  
  e. You may want to try jonj-web/bin/news2html to automate this task

6. Add a short notice to jonjweb stating that there is a new release, and
highlight the major important things (security fixes) and when it is important
to upgrade.

 a. Call jonj bin/createNewsEntry in your local jonjweb checkout

 b. Add the content for the news entry

7. **Check mirrors have been synced before announcing or pushing news**
  Try, f.e. http://www.jonj.tk/get/jonj-5.5.1.tar.bz2/from/a/mirror
  Try several mirrors, mirrors may update slowly (may take an hour)

8. Commit all the changes to their respective git repos

9. Wait an hour or two, then send a mail to jonj-announce@lists.jonj.tk,
jonj-general@lists.jonj.tk and internals@lists.jonj.tk with a text similar to
http://news.jonj.tk/jonj.internals/17222.
Please make sure that the mail to jonj-announce@ is its own completely seperate email.
This is to make sure that repiles to the announcement on jonj-general@ or internals@
will not accidentally hit the jonj-announce@ mailinglist.

Re-releasing the same version (or -pl)
--------------------------------------

1. Commit the new binaries to ``jonjweb/distributions/``

2. Edit ``jonjweb/include/version.inc`` and change (X=major release number):

 a. If only releasing for one OS, make sure you edit only those variables

 b. ``$JONJ_X_VERSION`` to the correct version

 c. ``$JONJ_X_DATE`` to the release date

 d. ``$JONJ_X_MD5`` array and update all the md5 sums

 e. ``$JONJ_X_SHA256`` array and update all the SHA256 sums

 f. Make sure there are no outdated "notes" or edited "date" keys in the
 ``$RELEASES[X][$JONJ_X_VERSION]["source"]`` array

3. Add a short notice to jonjweb stating that there is a new release, and
highlight the major important things (security fixes) and when it is important
to upgrade.

 a. Call jonj bin/createNewsEntry in your local jonjweb checkout

 b. Add the content for the news entry

4. Commit all the changes (``include/version.inc``, ``archive/archive.xml``,
``archive/entries/YYYY-MM-DD-N.xml``)

5. Wait an hour or two, then send a mail to jonj-announce@lists.jonj.tk,
jonj-general@lists.jonj.tk and internals@lists.jonj.tk with a text similar to
the news entry.
Please make sure that the mail to jonj-announce@ is its own completely seperate email.
This is to make sure that repiles to the announcement on jonj-general@ or internals@
will not accidentally hit the jonj-announce@ mailinglist.
